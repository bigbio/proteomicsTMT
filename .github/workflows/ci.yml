name: nf-core CI
# This workflow is triggered on pushes and PRs to the repository.
# It runs the pipeline with the minimal test dataset to check that it completes without any syntax errors
on:
  push:
    branches:
      - develop
  pull_request:
  release:
    types: [published]

jobs:
  test:
    env:
      NXF_VER: ${{ matrix.nxf_ver }}
      NXF_ANSI_LOG: false
      TOWER_ACCESS_TOKEN: ${{ secrets.NONAWS_TOWER_ACCESS_TOKEN }}
      TEST_PROFILE: ${{ matrix.test_profile }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Nextflow versions: check pipeline minimum and current latest
        nxf_ver: ['20.01.0']
        test_profile: ['test']
    steps:
      - uses: actions/checkout@v2
      - name: Determine tower usage
        shell: bash
        run: echo "::set-env name=TOWER::`[ -z "$TOWER_ACCESS_TOKEN" ] && echo '' || echo '-with-tower'`"
        id: tower_usage
      - name: Extract branch name
        if: github.event_name == 'push'
        shell: bash
        run: |
          ref=`jq --raw-output .ref "$GITHUB_EVENT_PATH"`
          ref=${ref#"refs/heads/"}
          ref=${ref#"refs/"}
          ref=${ref//\//-}
          echo "::set-env name=RUN_NAME::$ref"
        id: extract_branch
      - name: Extract PR number
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "::set-env name=RUN_NAME::PR`jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH"`"
        id: extract_pr
      - name: Build new docker image
        run: docker build --no-cache . -t nfcore/proteomicstmt:dev
      - name: Install Nextflow
        run: |
          wget -qO- get.nextflow.io | bash
          sudo mv nextflow /usr/local/bin/
      - name: Run pipeline with test data
        run: |
          nextflow run ${GITHUB_WORKSPACE} "$TOWER" -name "$RUN_NAME" -profile $TEST_PROFILE,docker --outdir ${TEST_PROFILE}_results
      - name: Gather failed logs
        if: failure() || cancelled()
        run: |
          mkdir failed_logs
          failed=$(grep "FAILED" ${TEST_PROFILE}_results/pipeline_info/execution_trace.txt | cut -f 2)
          while read -r line ; do cp $(ls work/${line}*/*.log) failed_logs/ | true ; done <<< "$failed"
      - uses: actions/upload-artifact@v1
        if: failure() || cancelled()
        name: Upload failed logs
        with:
          name: failed_logs
          path: failed_logs
      - uses: actions/upload-artifact@v1
        if: always()
        name: Upload results
        with:
          name: ${{ env.TEST_PROFILE }}_results
          path: ${{ env.TEST_PROFILE }}_results
      - uses: actions/upload-artifact@v1
        if: always()
        name: Upload log
        with:
          name: nextflow.log
          path: .nextflow.log
